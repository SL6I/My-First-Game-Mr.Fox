using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using TMPro;
using UnityEngine.SceneManagement;
public class PlayerController : MonoBehaviour
{
    //Start() variables
    private Rigidbody2D rb;
    private Animator anim;
    private Collider2D coll;

    //FSM
    private enum State { idle, running, jumping, falling , hurt}
    private State state = State.idle;

    //Inspector variables
    [SerializeField] private LayerMask ground;
    [SerializeField] private float speed = 10f;
    [SerializeField] private float jumpForce = 85f;
    [SerializeField] private float hurtForce = 15f;
    [SerializeField] private AudioSource footStep;
    [SerializeField] private AudioSource cherrySound;
    [SerializeField] private AudioSource gemSound;
    [SerializeField] public AudioSource hurtSound;
    [SerializeField] private AudioSource jumpSound;
    private bool doubleJump = true; // Additional 'true'
    public bool press = false;

    private void Start()
    {
       
        rb = GetComponent<Rigidbody2D>();
        anim = GetComponent<Animator>();
        coll = GetComponent<Collider2D>();
        UIKeeper.perm.healthBar.text = UIKeeper.perm.health.ToString();
        UIKeeper.perm.cherryText.text = UIKeeper.perm.cherries.ToString();
        UIKeeper.perm.deathCounter.text = UIKeeper.perm.deathCount.ToString();
        
        
    }
   
    private void Update()
    {
       
         if (state != State.hurt)
        {
            Movement();
        }
       
        AnimationState();
        anim.SetInteger("state", (int)state); //sets animation based on Enumerator state

        
        
    }

    // Trigger for Collectables //
    private void OnTriggerEnter2D(Collider2D collision) 
    {
        if (collision.tag == "Collectable")
        {
            cherrySound.Play();
            Destroy(collision.gameObject); // Cherry destroy
            UIKeeper.perm.cherries ++;
            UIKeeper.perm.cherryText.text = UIKeeper.perm.cherries.ToString(); // 'cherryText.text' it will store only string // 
        }

        if (collision.tag == "PowerUp")
        {
            gemSound.Play();
            Destroy(collision.gameObject); 
            jumpForce = 120;
            speed = 13.5f;
            GetComponent<SpriteRenderer>().color = Color.yellow;
            StartCoroutine(RestPower());
        }

    }
    // To interact with the enemy  
    private void OnCollisionEnter2D(Collision2D other)
    {
        if (other.gameObject.tag == "Enemy")
        {
            Enemy enemy = other.gameObject.GetComponent<Enemy>();
            if (state == State.falling)
            {
                enemy.JumpedOn();
                Jump();
            }

            else
            {
                // Getting hurt //
                state = State.hurt;
                HandleHealth();
                hurtSound.Play();


                if (other.gameObject.transform.position.x > transform.position.x) // Enemy position > My position
                {
                    // the enemy is on the right and I should be damaged and move left //
                    rb.velocity = new Vector2(-hurtForce, rb.velocity.y);
                }
                else
                {
                    // the enemy is on the left and I should be damaged and move right // 
                    rb.velocity = new Vector2(hurtForce, rb.velocity.y);
                }
            }

        }
        else if (other.gameObject.tag == "Spike")
        {
            // Getting hurt //
            state = State.hurt;
            HandleHealth();
            hurtSound.Play();


            if (other.gameObject.transform.position.x > transform.position.x) // Enemy position > My position
            {
                // the enemy is on the right and I should be damaged and move left //
                rb.velocity = new Vector2(-hurtForce, rb.velocity.y);
            }
            else
            {
                // the enemy is on the left and I should be damaged and move right // 
                rb.velocity = new Vector2(hurtForce, rb.velocity.y);
            }
        }


    }
    
    // to build the movement of the player //  
    private void Movement()
    {
        float hDirection = Input.GetAxis("Horizontal");

        

        //Moving left
        if (hDirection < 0)
        {
            rb.velocity = new Vector2(-speed, rb.velocity.y);
            transform.localScale = new Vector2(-1, 1);
            press = true; // additional
        }
        //Moving right
        else if (hDirection > 0)
        {
            rb.velocity = new Vector2(speed, rb.velocity.y);
            transform.localScale = new Vector2(1, 1);
            press = true; // additional
        }
        else
        {
            press = false; // additional
            rb.velocity = new Vector2(0, rb.velocity.y); // Stop moving 
        } 


        //Jumping
        if (Input.GetButtonDown("Jump"))
        {
            if (coll.IsTouchingLayers(ground) || doubleJump)
            {
                Jump();
                doubleJump = !doubleJump;
            } 
        }

        // double Jump
        if (Input.GetButtonUp("Jump") && rb.velocity.y > 0)
        {
            rb.velocity = new Vector2(rb.velocity.x, rb.velocity.y * 0.5f);
        }

        if (coll.IsTouchingLayers(ground) && !Input.GetButton("Jump"))
        {
            doubleJump = false;
        }
    }
    // To Jump 
    private void Jump()
    {
        rb.velocity = new Vector2(rb.velocity.x, jumpForce);
        state = State.jumping;
        jumpSound.Play();
    }
   
    // to show the state of the player // 
    private void AnimationState()
    {
        
         if (!coll.IsTouchingLayers(ground) && state != State.jumping)
        {
            state = State.falling; // because the gravity will be there  
        }
        else if (state == State.jumping)
        {
            if (rb.velocity.y < .1f)
            {
                state = State.falling;
            }
        }
        else if (state == State.falling)
        {
            if (coll.IsTouchingLayers(ground))
            {
                state = State.idle;
            }
        }
        else if (state == State.hurt)
        {
            if (Mathf.Abs(rb.velocity.x) < .1f)
            {
                state = State.idle;
            }
        }

        else if (Mathf.Abs(rb.velocity.x) > 1f)
        {
             
            //Moving
            if (!press)
            {
                state = State.idle;
                rb.velocity = Vector2.zero;
                
            }
            else
            {
                state = State.running; // the Base
            }
        }
        
        
        else
        {
            state = State.idle;
        }
    }

    // To make a sound while running
    private void RunningSound()
    {
        footStep.Play(); // Play the clip  
    }

    // To handle the health 
    private void HandleHealth()
    {
        if (UIKeeper.perm.health != 0)
        {
            UIKeeper.perm.health -= 1;
        }
       
        UIKeeper.perm.healthBar.text = UIKeeper.perm.health.ToString();
        if (UIKeeper.perm.health <= 0)
        {
            SceneManager.LoadScene(SceneManager.GetActiveScene().name);
            UIKeeper.perm.Reset(); // Losing all the cherries 
            UIKeeper.perm.deathCount++;
            UIKeeper.perm.deathCounter.text = UIKeeper.perm.deathCount.ToString();
            UIKeeper.perm.health = 5;
        }
    }
    // make an ability 
    private IEnumerator RestPower()
    {
        yield return new WaitForSeconds(10); // the player will have his power only in 10 sec //
        jumpForce = 85; // and then get back to normal 
        speed = 10f; // and then get back to normal 
        GetComponent<SpriteRenderer>().color = Color.white;
    }
}